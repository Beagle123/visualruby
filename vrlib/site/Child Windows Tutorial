=Child Windows

<b>There is an excellent example of using child window is VR's examples.
Click on "Help", to install examples, and "Open Project" to see them.</b>

Child windows are simply windows that have a parent window.  
The reason child windows are useful is because they will 
automatically close when their parent does.  This is
often desirable because your main program may open
several child windows, and when the user closes the main
program, you want all the children to close as well.

A good example of child windows is in visualruby itself:

http://visualruby.net/img/child_main.jpg

The main program has opened the "Settings" window.  Both
windows function simultaniously, so the user is free
to close the main window anytime.  When the main
window closes, you don't want the "Settings" window
to persist on the screen by itself--it belongs
to the main program.  So visualruby is its parent.

This functionality is easily achieved with visualruby.
To create a child window that functions simultaniously
with its parent, pass a reference to the parent class
in the load_glade() method:

 class MyChild
		
   include GladeGUI

   def initialize(parent)
     load_glade(__FILE__, parent)
   end	
 
 end

In the above example, you'd pass a reference to the parent like this:

 class MyParent

   include GladeGUI

   def show_child()
     var = MyChild.new(self)
   end

 end

==Modal Windows

There's another type of child window--modal windows.
Modal windows will freeze the operation of the main program until
they're closed.  The benefit of modal windows is that you can prevent
the user from doing anything until the modal child window is resolved.
Again, a good example comes from visualruby itself:

http://visualruby.net/img/child_open.jpg

The "Open Project" window is being displayed, and the user must
either select a project, or close the window before anything
else can happen.  The main program is frozen.

So how do you make a modal child window?

==Do Nothing! (don't set a parent)

When you create a new window using visualruby, it defaults
to a modal window.  You can see this in glade if you
inspect the "window1" window.  Under the "General" tab
you'll see that all the windows are set to modal.

http://visualruby.net/img/child_glade.jpg

You should always leave the modal setting set to "Yes."
Visualruby automatically manages child windows using
the parent argument of the load_glade() method.  (more later)
It will automatically close child windows, and halt
the main program as needed.  Simply pass a parent object
to load_glade if you want the child window to be non-modal,
and omit the parent reference, if you want a modal window.


One of the benefits of modal child windows is that your main program
can wait until the child window returns a value.  This can
make them function like dialog boxes.

When you halt the parent window you can return a value
from the child window to the parent:

  @value = nil
  win = ChildWindow.new(self)  # ChildWindow is a class you define that "includes" GladeDUI.
  win.show()   #program halts here until child closes.  Also child sets value of @value
  if @value = "Value Now Set!" then
     ...your code here

The ChildWindow class sets the value of @value before closing:

  class ChildWindow
     def initialize(parent)
       @parent = parent
     end

     def buttonSave__clicked
       @parent.value = "Value Now Set!"
       destroy_window()
     end
  end


This only works if you don't set the parent in the child's load_glade() call.

If you set the parent of this child window, the program 
will still show the
child window, but the program won't halt when 
win.show() is called, so you can't get a return value.
In the "Open Project" example above, visualruby's main
program is halted until the "Open Project" window returns.
The "Open Project" window sets a variable, @proj_path before
closing, and the main program uses this variable to open the new
project.


